/*
The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

package main

import "fmt"

// factor returns a []int64 of all of the factors of num.
func factor(num int64) []int64 {
	fmap := make(map[int64]bool)
	fmap[1] = true
	fmap[num] = true

	for i := int64(2); i < num; i++ {
		// If a number we are testing has already been found as a factor there
		// are no more factors to find.
		if _, exists := fmap[i]; exists {
			break
		}

		if num%i == 0 {
			fmap[i] = true
			fmap[num/i] = true
		}
	}

	factors := make([]int64, len(fmap))
	i := 0
	for k := range fmap {
		factors[i] = k
		i++
	}

	return factors
}

// triangleNumbers returns a closure which produces the sequence of triangle
// numbers.
func triangleNumbers() func() int64 {
	var next int64
	var i int64 = 1

	return func() int64 {
		next = next + i
		i++
		return next
	}
}

func main() {
	nextTriangle := triangleNumbers()

	for {
		num := nextTriangle()
		factors := factor(num)
		if len(factors) > 500 {
			fmt.Println(num)
			break
		}
	}
}
